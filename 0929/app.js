// 오늘은 리덕스란 ?

// 리액트에서 사용할 수 있는 하나의 라이브러리
// 라이브러리라는건 즉 없어도 리액트로 작업물을 만들 수 는 있지만 편하게 작업하려고 쓰는 것

// 실무에서 리덕스를 안쓰면 매우 불편하기 때문에 필수로 사용한다.

// 리액트는 자식 컴포넌트에 props 로 전달은 가능한데
// 다른 컴포넌트에서 직접 데이터 공유가 불가하다.
// 그래서 공유해야할 데이터를 공유받는 자식 컴포넌트들의 공통 부모에서 State를 만들어서
// 자식 컴포넌트에게 전달해 주는데 리액트는 데이터 흐름이 단방향이기 때문에
// 작업을 하다보면 부모 컴포넌트에 무척 많은 props가 생기는데 이런 단점을 보완하기 위해서
// 리덕스는 state를 저장해주는 store(저장소) 각각의 컴포넌트가 어느 컴포넌트던
// 사용 할 수 있는 공통된 store(저장소)를 사용할 수 있다. 원하는 값을 저장하고 가져올 수 있다.

// 컴포넌트에서 값을 요청하고 전달 받는걸 직접 할 수 있다.
// 함수를 통해서 동작하는 방식으로 수정과 요청 가능

// 리덕스 동작 구조

// 값을 저장하는 구조는
// useDispatch 리액트 훅 함수
// 컴포넌트 -> useDispatch -> Action -> Reducer -> store
// 컴포넌트가 Action을 보내고 reducer로 전달받고 store의 값을 최신화 해준다.
// Action 은 동작할 기능의 이름 행동
// Reducer 는 함수인데 내가 사용할 동작들을 조건문으로 모아둔 곳
// 컴포넌트가 무엇을 동작할지 Action 행동을 무엇을 할지를 Reducer로 보내고 store의 값을 바꿔준다.
// store(저장소)는 객체라고 생각하면 된다. state 값을 저장해둘 객체
// state의 값이 바뀌면 컴포넌트가 리 렌더링 된다.

// 값을 가져오는 구조는
// useSelector 리액트 훅 함수
// store -> useSelector -> 컴포넌트
// useSelector는 store에 있는 값을 가져올 때 사용하는 함수

// 리덕스를 사용해보자
// npm i redux
// yarn add redux

// redux는 리액트에서만 사용하는게 아닌 리액트에서'도' 사용할 수 있는 것

// 리액트에서 react-redux 라이브러리로 편하게 사용할 수 있다.
// npm i react-redux

// Provider
// Provider 컴포넌트이고 이 컴포넌트로 감싸준 컴포넌트를 리덕스 저장소의 사용을 가능하게 만들어준다.
// 이 컴포넌트는 props로 store(저장소)를 전달 받는다.

